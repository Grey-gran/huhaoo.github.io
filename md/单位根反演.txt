---
title: 单位根反演
date: 2019-04-16 15:38:44
tags:
- 单位根反演
- math
mathjax: on
---

> 给定$n,k,p$，求
>
> $$
> \begin{align}
> \sum_{i\equiv p(\bmod k)}{n\choose i}v^i\tag{1}
> \end{align}
> $$
>

还有Ex版

> 给定$n,k,p$，求
> $$
> \begin{align}
> \sum_{i}{n\choose ki+p}g_{ki+p}\tag{Ex1}
> \end{align}
> $$
>
> 其中$g_{i}=g_{i-1}+g_{i-2},g_{0}=g_{1}=1$

前置知识：

* [单位根的性质](/2019/03/14/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%AE%97%E6%B3%95%E5%90%88%E9%9B%86/#FFT)
  PS：那里$\omega$打成了$w$
* [矩阵运算](/2019/04/18/矩阵运算/)

<!--more-->

不妨先考虑
$$
\begin{align}
\sum_{i}{n\choose ki}v^i\tag{2}
\end{align}
$$


有
$$
\begin{align}
f(x)=\sum_{i}f_ix^i=\sum_{i}{n\choose i}(vx)^i1^{n-i}=(vx+1)^n\tag{3}
\end{align}
$$

和（为了避免循环变量和虚数单位有歧义，下面用$a$代替循环变量$i$）
$$
\begin{align}
\sum_{0\le a<n}\omega_n^{ka}=\cases{n&$n|k$\\
\dfrac{w_n^{nka}-1}{w_n-1}=0&$n\not|k$}=n[n|k]\tag{4}\\
\end{align}
$$
根据$(3),(4)$有
$$
\begin{align}
\dfrac{\sum_{0\le a<k}f(\omega_k^a)}k=&\dfrac{\sum_{0\le a<k}\sum_{b}f_bw_{k}^{ab}}k\notag\\
=&\sum_{b}f_b\dfrac{\sum_{0\le a<k}\omega_k^{ab}}{k}\notag\\
=&\sum_bf_b[k|b]\tag{5}
\end{align}
$$
带入就可以得$(2)$的答案了
$$
\begin{align}
\sum_b{n\choose kb}v^b=&\sum_{k|b}{n\choose b}v^b\notag\\
=&\sum_{b}{n\choose b}v^b[k|b]\notag\\
=&\dfrac 1k\sum_{0\le a<k}f(\omega_k^a)\notag\\
=&\dfrac 1k\sum_{0\le a<k}(1+v\omega_k^a)^n\tag{6}
\end{align}
$$
快速幂即可，复杂度：$O(k\log n)$

然后可以考虑$(1)$的答案了
$$
\begin{align}
\sum_{b}{n\choose kb+p}v^b=&\sum_{k|b}{n\choose b+p}v^b\notag\\
=&\sum_{b}f_{b+p}[k|b]\notag
\end{align}
$$
考虑去掉$+p$，根据生成函数的特性
$$
\begin{align}
x^{-p}f(x)=&x^{-p}\sum_{a}f_ax^a\notag\\
=&\sum_af_{a}x^{a-p}\notag\\
=&\sum_af_{a+p}x^a\tag{7}
\end{align}
$$


然后简单替换一下：
$$
\begin{align}
\dfrac{\sum_{0\le a<k}\omega_{k}^{-ap}f(\omega_k^a)}k=&\dfrac{\sum_{0\le a<k}\sum_{b}f_b\omega_{k}^{ab}}k\notag\\
=&\sum_{b}f_{b+p}\dfrac{\sum_{0\le a<k}\omega_k^{ab}}{k}\notag\\
=&\sum_bf_{b+p}[k|b]\tag{8}
\end{align}
$$
于是可以得：
$$
\begin{align}
\sum_{b}{n\choose kb+p}v^b=&\sum_{k|b}{n\choose b+p}v^b\notag\\
=&\sum_{b}f_{b+p}[k|b]\notag\\
=&w_k^{-p}\dfrac 1k\sum_{0\le a<k}(1+v\omega_k^a)^n\tag{9}
\end{align}
$$

考虑一下$\rm Ex 1$

我们知道$g$数组可以矩阵快速幂求。

$$
\begin{align}
\begin{bmatrix}1&1\\1&0\end{bmatrix}\times\begin{bmatrix}g_{i}\\g_{i-1}\end{bmatrix}=&\begin{bmatrix}g_{i+1}\\g_{i}\end{bmatrix}\tag{Ex2}
\end{align}
$$

也就是

$$
\begin{align}
g_i=&\left(\begin{bmatrix}1&1\\1&0\end{bmatrix}^{i}\begin{bmatrix}1\\1\end{bmatrix}\right)_{2,1}\tag{Ex3}
\end{align}
$$

代入进去：

$$
\begin{align}
\sum_{i}{n\choose ik+p}g_{i+kp}=&\sum_{i}{n\choose ik+p}\left(\begin{bmatrix}1&1\\1&0\end{bmatrix}^{i}\begin{bmatrix}1\\1\end{bmatrix}\right)_{2,1}\notag\\
=&\left(\sum_{i}{n\choose ik+p}\begin{bmatrix}1&1\\1&0\end{bmatrix}^{i}\begin{bmatrix}1\\1\end{bmatrix}\right)_{2,1}\notag
\end{align}
$$

又因为矩阵满足乘法结合律

所以

$$
\begin{align}
\sum_{i}{n\choose ik+p}g_{i+kp}=&\left(\left(\sum_{i}{n\choose ik+p}\begin{bmatrix}1&1\\1&0\end{bmatrix}^{i}\right)\begin{bmatrix}1\\1\end{bmatrix}\right)_{2,1}\notag\\
=&\left(\left(\sum_{i}{n\choose ik+p}\begin{bmatrix}1&1\\1&0\end{bmatrix}^{i}E^{n-i}\right)\begin{bmatrix}1\\1\end{bmatrix}\right)_{2,1}\tag{Ex4}\\
\end{align}
$$

不妨仿照上面的做法

$$
\begin{align}
f(x)=&\left(\begin{bmatrix}1&1\\1&0\end{bmatrix}x+E\right)^n\tag{Ex5}
\end{align}
$$

~~可以猜到~~，上面的结论是适用的！

所以

$$
\begin{align}
\sum_{i}{n\choose ik+p}g_{ik+p}=\left(\left(\dfrac 1k\sum_{0\le a<k}\omega_{k}^{-ap}\left(E+\begin{bmatrix}1&1\\1&0\end{bmatrix}\omega_k^a\right)^n\right)\begin{bmatrix}1\\1\end{bmatrix}\right)_{2,1}\tag{Ex6}
\end{align}
$$

另外，显然是给一个膜数$p$让你输出取膜后的。

那么就要用原根$g$的$\dfrac{p-1}{k}$次方代替$\omega_k$

想打例题可以看看bzoj3328

[`code`](https://github.com/huhaoo/template/blob/master/%E5%8D%95%E4%BD%8D%E6%A0%B9%E5%8F%8D%E6%BC%94.cpp)

```cpp
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<algorithm>
using namespace std;
#define fr(i,a,b) for(long long i=(a),end_##i=(b);i<=end_##i;i++)
#define fd(i,a,b) for(long long i=(a),end_##i=(b);i>=end_##i;i--)
long long read()
{
	long long r=0,t=1,c=getchar();
	while(c<'0'||c>'9')
	{
		t=c=='-'?-1:1;
		c=getchar();
	}
	while(c>='0'&&c<='9')
	{
		r=r*10+c-48;
		c=getchar();
	}
	return r*t;
}
const int N=5;
long long power(long long a,long long b,long long p)
{
	long long r=1;
	while(b)
	{
		if(b&1)
			r=r*a%p;
		a=a*a%p;
		b>>=1;
	}
	return r;
}
long long p,g,wk,n,k,c[N];
struct matrix
{
	long long n,m;
	long long a[N][N];
	matrix()
	{
		n=m=0;
		memset(a,0,sizeof(a));
	}
	void clear()
	{
		n=m=0;
		memset(a,0,sizeof(a));
	}
	matrix& operator+=(matrix x)
	{
		fr(i,1,n)
			fr(j,1,m)
				a[i][j]=(a[i][j]+x.a[i][j])%p;
		return *this;
	}
	matrix operator+(matrix x)
	{
		x+=*this;
		return x;
	}
	matrix operator*(matrix x)
	{
		matrix y;
		y.n=n;
		y.m=x.m;
		fr(i,1,y.n)
			fr(j,1,y.m)
				fr(k,1,m)
					y.a[i][j]=(y.a[i][j]+a[i][k]*x.a[k][j])%p;
		return y;
	}
	matrix& operator*=(matrix x)
	{
		return *this=*this*x;
	}
	matrix operator*(long long c)
	{
		matrix x=*this;
		fr(i,1,n)
			fr(j,1,m)
				x.a[i][j]=x.a[i][j]*c%p;
		return x;
	}
	matrix& operator*=(long long c)
	{
		return *this=*this*c;
	}
}E,a,b,ans;
matrix operator*(long long c,matrix x)
{
	return x*c;
}
void initc(long long p)
{
	c[0]=0;
	for(long long i=2;i*i<=p;i++)
		if(p%i==0)
		{
			c[++c[0]]=i;
			while(p%i==0)
				p/=i;
		}
	if(p!=1)
		c[++c[0]]=p;
}
long long check()
{
	fr(i,1,c[0])
		if(power(g,p/c[i],p)==1)
			return 0;
	return 1;
}
void init()
{
	if(p<=3)
		g=p-1;
	else
	{
		g=1;
		while(!check())
			g++;
	}
	wk=power(g,(p-1)/k,p);
}
matrix getE(long long n)
{
	matrix E;
	E.n=E.m=n;
	fr(i,1,n)
		E.a[i][i]=1;
	return E;
}
matrix power(matrix a,long long b)
{
	matrix r=getE(a.n);
	while(b)
	{
		if(b&1)
			r*=a;
		a*=a;
		b>>=1;
	}
	return r;
}
int main()
{
	long long T=read();
	E=getE(2);
	b.n=b.m=2;
	b.a[1][1]=b.a[1][2]=b.a[2][1]=1;
	ans.n=2;
	ans.m=1;
	ans.a[1][1]=ans.a[2][1]=1;
	while(T--)
	{
		n=read();
		k=read();
		p=read();
		initc(p-1);
		init();
		a.clear();
		a.n=a.m=2;
		long long w=1;
		fr(i,0,k-1)
		{
			a+=power(E+b*w,n);
			w=w*wk%p;
		}
		a*=power(k,p-2,p);
		printf("%lld\n",(a*ans).a[2][1]);
	}
	return 0;
}
```
