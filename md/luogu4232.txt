---
title: luogu4232[单纯形伪模板]
date: 2018-07-10 20:43:08
tags:
- 单纯形
- 纳什均衡
mathjax: on
---

>在一个有向无环图上，阿燐和阿空第0个时刻分别站在编号为 $s_r$ , $s_k$ 的节点，二人都知道双方的初始位置，对地图完全了解。
>
>从第$1$个时刻起，每个时刻阿燐和阿空都可以选择站着不动，也可以选择移动到相邻的节点，二人每时刻的移动是同时开始的，并且不能中途改变方向。
>
>阿燐被阿空捉住时，游戏立即结束。如果阿空一直没有捉住阿燐，第 $t$ 个时刻结束后两人就不能再继续移动了，游戏将在第 $t+1$ 个时刻结束。
>
>阿空的目的是尽快捉住阿燐(捉住的定义是与阿燐同一时刻站在同一节点)，而阿燐的目的是尽可能更长时间不被阿空捉住。具体而言，若一场游戏进行了$ t_0$ 时刻，阿燐的得分是 $t_0$ ，阿空的得分是 $-t_0$，双方都希望自己得分(或得分的期望值)更高。
>
>我们认为在这个过程中阿燐和阿空随时都能知道对方的位置。两人在第 $t$ 个时刻不能看出第 $t+1$个时刻对方要走到哪里。
>
>恋恋想知道，在双方最优决策的情况下，游戏结束时刻的期望值是多少。

~~题目好长啊~~

<!--more-->

#### 单纯形

**形如如下式子：**
$$
\max z=\sum_{i=1}^nc_ix_i\\
s.t.~~ \forall j\in[1,m],\sum_{i=1}^na_{j,i}x_i\le b_i
$$
具体[看这](https://www.cnblogs.com/ECJTUACM-873284962/p/7097864.html)吧

#### 本题题解

这位dalao讲的很好啊：[link](https://blog.csdn.net/zlttttt/article/details/79775012)

[`my code`](https://github.com/huhaoo/luogu/blob/master/4232.cpp)

```cpp
#include<stdlib.h>
namespace run
{
	#define N 1010
	#define NN 30
	int nn,T,begin[N],next[N],to[N],e,n,m;
	double a[N][N],f[NN][NN][NN];
	#define fo(i,a) for(int i=begin[a];i;i=next[i])
	#define eps 1e-8
	void add(int u,int v)
	{
		e++;
		to[e]=v;
		next[e]=begin[u];
		begin[u]=e;
	}
	void init(int nn,int mm)
	{
		n=nn;
		m=mm;
		fr(i,0,m)
			fr(j,0,n)
				a[i][j]=0.;
	}
	void pivot(int l,int e)//l:[1..m],e:[1..n]
	{
		double k=a[l][e];a[l][e]=1.;
		fr(i,0,n)a[l][i]/=k;
		fr(i,0,m)
			if(i!=l&&fabs(a[i][e])>eps)
			{
				k=a[i][e];a[i][e]=0;
				fr(j,0,n)
					a[i][j]-=a[l][j]*k;
			}
	}
	int init()
	{
		while(1)
		{
			int l=0,e=0;
			fr(i,1,m)
				if(a[i][0]<-eps&&(!l||(rand()&1)))
					l=i;
			if(!l)break;
			fr(i,1,n)
				if(a[l][i]<-eps&&(!e||(rand()&1)))
					e=i;
			if(!e)return 0;
			pivot(l,e);
		}
		return 1;
	}
	int simplex()
	{
		while(1)
		{
			int l=0,e=0;
			double mi=1e15;
			fr(i,1,n)
				if(a[0][i]>eps)
				{
					e=i;
					break;
				}
			if(!e)break;
			fr(i,1,m)
				if(a[i][e]>eps&&a[i][0]/a[i][e]<mi)
				{
					mi=a[i][0]/a[i][e];
					l=i;
				}
			if(!l)return 0;
			pivot(l,e);
		}
		return 1;
	}
	double dfs(int x,int y,int t)
	{
		if(x==y||t>T)return 1.*t;
		if(f[x][y][t])return f[x][y][t];
		int dx=0,dy=0;
		fo(i,x)fo(j,y)dfs(to[i],to[j],t+1);
		fo(i,x)dx++;
		fo(i,y)dy++;
		//dx->n,dy->m
		init(dy,dx);
		fr(i,1,n)a[0][i]=1.;
		dx=0;dy=0;
		fo(i,x)
		{
			dx++;
			dy=0;
			fo(j,y)
			{
				dy++;
				a[dx][dy]=dfs(to[i],to[j],t+1);
			}
			a[dx][0]=1;
		}
		if(init()&&simplex())f[x][y][t]=-1./a[0][0];
		return f[x][y][t];
	}
	int main()
	{
		srand((unsigned long long)new char);
		nn=read();int m=read(),x=read(),y=read();T=read();
		fr(i,1,nn)add(i,i);
		while(m--)
		{
			int u=read(),v=read();
			add(u,v);
		}
		printf("%.3lf\n",dfs(x,y,0));
		return 0;
	}
}
int main(){return run::main();}
```

