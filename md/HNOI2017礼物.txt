---
title: HNOI2017礼物
date: 2018-07-05 16:38:32
tags:
- FFT
- HNOI
mathjax: on
---

FFT巧妙啊

<!--more-->

先考虑没有旋转操作，设第一个项链加上了$C$。
$$
\sum_{i=1}^n(x_i-y_i+C)^2\\
=\sum_{i=1}^n(x_i^2+y_i^2+C^2-2x_iy_i+2x_iC-2y_iC)\\
=\sum_{i=1}^n(x_i^2+y_i^2)+\sum_{i=1}^n(C^2+2x_iC-2y_iC)-\sum_{i=1}^n2x_iy_i
$$
就这样分三部分

第一个式子值恒定（即使旋转）

第二个式子
$$
\sum_{i=1}^n(C^2+2x_iC-2y_iC)\\
=nC^2+2\sum_{i=1}^n(x_i-y_i)C
$$
求极值即可

第三个式子变下形：

翻转$x$

那么题目要求的就可以化为卷积：
$$
-2\sum_{i=1}^n x_iy_i=-2\sum_{i=1}^nx_{n+1-i}y_i
$$
旋转，相当于复制$x$一遍后后移若干位

卷积就FFT就好了。

[`my code`](https://github.com/huhaoo/luogu/blob/master/3723.cpp)

```cpp
#define N (1<<21)
struct complex
{
	double a,b;
	complex(double aa=0,double bb=0)
	{
		a=aa;
		b=bb;
	}
	complex operator+(complex k){return complex(a+k.a,b+k.b);}
	complex operator+=(complex k){return *this=*this+k;}
	complex operator-(complex k){return complex(a-k.a,b-k.b);}
	complex operator-=(complex k){return *this=*this-k;}
	complex operator*(complex k){return complex(a*k.a-b*k.b,a*k.b+b*k.a);}
	complex operator*=(complex k){return *this=*this*k;}
	double &real(){return a;}
	double &unreal(){return b;}
}a[N],b[N],c[N];
int n,l,x[N],y[N],ans,r[N];
int calc()
{
	int a=n,b=0;
	fr(i,1,n)b+=2*(x[i]-y[i]);
	int k1=-b/2/a,k2=-1-b/2/a,k3=1-b/2/a;
	return min(a*k1*k1+b*k1,min(a*k2*k2+b*k2,a*k3*k3+b*k3));
}
double pi=acos(-1.0);
void fft(complex *a,int opt)
{
	fr(i,0,(1<<l)-1)
		if(i<r[i])
			swap(a[i],a[r[i]]);
	fr(i,0,l-1)
	{
		complex wn(cos(pi/(1<<i)),opt*sin(pi/(1<<i)));
		for(int j=0;j<(1<<l);j+=(1<<(i+1)))
		{
			complex w(1,0);
			fr(k,0,(1<<i)-1)
			{
				complex x=a[j+k],y=w*a[(1<<i)+j+k];
				a[j+k]=x+y;
				a[j+k+(1<<i)]=x-y;
				w=w*wn;
			}
		}
	}
}
int main()
{
	n=read();read();
	fr(i,1,n)x[i]=read();
	fr(i,1,n)y[i]=read();
	l=0;
	fr(i,0,2*n-1)a[i]={x[(n*2-i-1)%n+1]*1.0,0};
	fr(i,0,n-1)b[i]={y[i+1]*1.0,0};
	while((1<<l)<=(3*n-2))l++;
	fr(i,0,(1<<l)-1)r[i]=(r[i>>1]>>1)|((i&1)<<(l-1));
	fft(a,1);
	fft(b,1);
	fr(i,0,(1<<l)-1)c[i]=a[i]*b[i];
	fft(c,-1);
	fr(i,-1,n-1)ans=min(ans,-2*int(c[n+i].real()/(1<<l)+0.5));
	fr(i,1,n)ans+=x[i]*x[i]+y[i]*y[i];
	ans+=calc();
	printf("%d\n",ans);
	return 0;
}
```

