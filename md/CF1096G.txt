---
title: CF1096G
date: 2019-01-05 08:58:08
tags:
- CF
- math
- NTT
mathjax: on
---

> 一个$n$位数，每位可以是给出的$k$个数码中的一个数，可以有前导$0$,输出前$\frac n2$位之和与后$\frac n2$位之和相等的方案数，保证$n$是偶数。

<!--more-->

记$f_{n,k}$为$n$个数$a_{1\dots n}$和为$k$的方案数（$\forall i,\exists j~a_i=b_j$）

那么答案为$\sum_{i=0}^\infty f_{\frac n2,i}^2$

可以发现：

$$
f_{i,j}=\sum_{k}f_{i-1,j-b_k}
$$

边界：$f_{0,0}=1$

可以发现$f_{a,b}$对$f_{c,d}$（$a<c$）的贡献为$f_{c-1,d-b}$

于是如果我们知道了$f_{2^i,0\dots\infty}$那么我们可以直接得到$f_{2^{i+1},0\dots\infty}$

因为由上上行可得：

$$
f_{a+b,i}=\sum_{j=0}^if_{a,j}f_{b,i-j}
$$

所以类似快速幂一样，用NTT优化乘法可以$O(n\lg n\lg nk)$做出

[`my code`](https://github.com/huhaoo/codeforces/edit/master/problems/1096G.cpp)

```cpp
#define N 4000010
#define mod 998244353
long long r[N],l,a[N],b[N],ans[N],l1,la,n,k;
#define g 3
#define gp 332748118
long long pow(long long a,long long b,long long p)
{
	long long r=1;
	while(b)
	{
		if(b&1)
			r=r*a%p;
		a=a*a%p;
		b>>=1;
	}
	return r;
}
void NTT(long long *a,int opt)
{
	fr(i,0,(1<<l)-1)
		if(i<r[i])
			swap(a[i],a[r[i]]);
	fr(i,0,l-1)
	{
		long long wn=pow(opt==1?g:gp,(mod-1)>>(i+1),mod);
		for(int j=0;j<(1<<l);j+=(1<<(i+1)))
		{
			long long w=1;
			fr(k,0,(1<<i)-1)
			{
				long long x=a[j+k],y=w*a[j+k+(1<<i)]%mod;
				a[j+k]=(x+y)%mod;
				a[j+k+(1<<i)]=(x-y+mod)%mod;
				w=w*wn%mod;
			}
		}
	}
	if(opt==-1)
	{
		int inv=pow(1<<l,mod-2,mod);
		fr(i,0,(1<<l)-1)
			a[i]=a[i]*inv%mod;
	}
}
long long c[N];
void times(long long *a,long long &n,long long *b,long long m)
{
	n=n+m;
	fr(i,0,m)
		c[i]=b[i];
	while((1<<l)<=n)
		l++;
	fr(i,1,(1<<l)-1)
		r[i]=((i&1)<<(l-1))|(r[i>>1]>>1);
	NTT(a,1);
	NTT(b,1);
	fr(i,0,(1<<l)-1)
		a[i]=a[i]*b[i]%mod;
	NTT(a,-1);
	fr(i,0,m)
		b[i]=c[i];
	fr(i,n+1,(1<<l)-1)
		a[i]=0;
	fr(i,m+1,(1<<l)-1)
		b[i]=0;
}
int main()
{
	n=read()/2;
	k=read();
	fr(i,1,k)
		a[read()]=1;
	fr(i,0,9)
		if(a[i])
			l1=i;
	ans[la=0]=1;
	while(n)
	{
		if(n&1)
			times(ans,la,a,l1);
		fr(i,0,l1)b[i]=a[i];
		times(a,l1,b,l1);
		n>>=1;
	}
	long long a=0;
	fr(i,0,la)
		a=(a+ans[i]*ans[i])%mod;
	printf("%lld\n",a);
	return 0;
}
```

