---
title: luogu4006|loj2324|清华集训 2017|小Y和二叉树
date: 2018-01-05 16:51:17
tags:
  - luogu
  - loj
  - 清华集训
  - DP
  - 贪心
mathjax: on
---

> 给定点的连边情况，求字典序最小的中序遍历

* Sample

  * Input

    ```
    4
    3 2 3 4
    1 1
    1 1
    1 1
    ```

  * Output

    ```
    2 1 3 4
    ```

<!--more-->

去[`loj`](https://loj.ac/problem/2324)做吧，可以下数据。

显然我们从$min_{k_i\le2}i$开始考虑。

![](luogu4006loj2324/img.png)

显然`A`就是序列的第一个数，也就是说上面式子里的$i$，$k_i$不能$>2$是因为那样$A$就有右子树，也就不是序列的第一个数了，然后$i$要尽量小。

我们要分情况讨论，先设$f_i$表示以$A$为根中序遍历可能的最小值。

那么$f_i=min\cases{\cases{i&$k_i\le2$\\0&$k_i=3$}\\f_u&$uv$有边连接}$

然后贪心遍历。

现在遍历顺序是：`A-B-f-G-C-D-E`

先把`A`小的子树放在`B`上

如果没有两个儿子，那么当且仅当$f_{son}=son$时放`C`，其它放`B`

注意细节。

代码：

```cpp
#define N 1000010
#define inf (1<<30)
int n,d[N],s[N],v[N<<1],p[N],k,f[N];
void dfs(int x)
{
	p[x]=1;
	f[x]=d[x]==3?inf:x;
	fr(i,1,d[x])
		if(!p[v[s[x-1]+i]])
		{
			dfs(v[s[x-1]+i]);
			f[x]=min(f[x],f[v[s[x-1]+i]]);
		}
}
void print1(int x)
{
	p[x]=0;
	if(d[x]==1)
	{
		printf(" %d",x);
		return;
	}
	if(d[x]==2)
	{
		int son;
		fr(i,1,2)
			if(p[v[s[x-1]+i]])
				son=v[s[x-1]+i];
		if(f[son]<x)
		{
			print1(son);
			printf(" %d",x);
		}
		else
		{
			printf(" %d",x);
			print1(son);
		}
	}
	if(d[x]==3)
	{
		int son1=0,son2=0;
		fr(i,1,3)
			if(p[v[s[x-1]+i]])
			{
				son1=son2;
				son2=v[s[x-1]+i];
			}
		if(f[son1]>f[son2])
		{
			int _=son1;
			son1=son2;
			son2=_;
		}
		print1(son1);
		printf(" %d",x);
		print1(son2);
	}
}
void print2(int x)
{
	p[x]=0;
	if(d[x]==1)
	{
		printf(" %d",x);
		return;
	}
	if(d[x]==2)
	{
		int son;
		fr(i,1,2)
			if(p[v[s[x-1]+i]])
				son=v[s[x-1]+i];
		printf(" %d",x);
		if(son>f[son])
			print1(son);
		else
			print2(son);
	}
	if(d[x]==3)
	{
		int son1=0,son2=0;
		fr(i,1,3)
			if(p[v[s[x-1]+i]])
			{
				son1=son2;
				son2=v[s[x-1]+i];
			}
		if(f[son1]>f[son2])
		{
			int _=son1;
			son1=son2;
			son2=_;
		}
		printf(" %d",x);
		print1(son1);
		print2(son2);
	}
}
int main()
{
	n=read();
	fr(i,1,n)
	{
		d[i]=read();
		s[i]=s[i-1]+d[i];
		fr(j,1,d[i])
			v[s[i-1]+j]=read();
		sort(v+s[i-1]+1,v+s[i]+1);
	}
	fd(i,n,1)
		if(d[i]<=2)
			k=i;
	p[k]=1;
	fr(i,1,d[k])
		dfs(v[s[k-1]+i]);
	printf("%d",k);
	if(d[k]==2&&f[v[s[k]]]<f[v[s[k]-1]])
	{
		int _=v[s[k]];
		v[s[k]]=v[s[k]-1];
		v[s[k]-1]=_;
	}
	if(d[k]==1)
		if(v[s[k]]>f[v[s[k]]])
			print1(v[s[k]]);
		else
			print2(v[s[k]]);
	else
	{
		print1(v[s[k]-1]);
		print2(v[s[k]]);
	}
	putchar(10);
	return 0;
}

```

