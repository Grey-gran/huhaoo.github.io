---
title: FWT
date: 2019-09-28 09:57:27
tags:
- FWT
- math
mathjax: on
---

~~我也不知道它们的区别~~

<!--more-->

记$A_0$为$A_{0\dots2^{n-1}-1}$,$A_1$为$A_{2^{n-1}\dots2^n-1}$，$B,C$同理

我们不妨记对常数运算和对多项式加减为各位分别处理

我们可以发现$\mathrm{opt}$和$+$有结合率（类似$\times$）

#### $\mathrm{or}$

$$
C_0=A_0~\mathrm{or}~B_0\\
C_1=A_0~\mathrm{or}~B_1+A_1~\mathrm{or}~B_0+A_1~\mathrm{or}~B_1\\
=(A_0+A_1)~\mathrm{or}~(B_0+B_1)-C_0
$$

#### $\mathrm{and}$

$$
C_1=A_1~\mathrm{and}~B_1\\
C_0=A_0~\mathrm{and}~B_0+A_0~\mathrm{and}~B_1+A_1~\mathrm{and}~B_0\\
=(A_0+A_1)~\mathrm{and}~(B_0+B_1)-C_1
$$

#### $\mathrm{xor}$

$$
C_0=A_0~\mathrm{xor}~B_0+A_1~\mathrm{xor}~B_1\\
C_1=A_0~\mathrm{xor}~B_1+A_1~\mathrm{xor}~B_0
$$

各分两个，直接搞的话复杂度变成了暴力

然而这就有一个显然的套路

记
$$
X=(A_0+A_1)~\mathrm{xor}~(B_0+B_1)\\
Y=(A_0-A_1)~\mathrm{xor}~(B_0-B_1)\\
C_0=\dfrac{X+Y}2,C_1=\dfrac{X-Y}2
$$

#### 复杂度

有$f(2^n)=2f(2^{n-1})+O(2^n)$

也就是$O(n2^n)$（在数据规模$2^n$情况下）

#### 改成FFT那样

发现$A,B$之间互不影响，变换完后再算$C$并逆变换也是对的，就可以分层操作。

~~感觉要贴一下代码~~

```cpp
namespace fwt
{
	const int mod=998244353,i2=(mod+1)/2;
	void fwtor(long long *a,long long n,long long opt)
	{
		fr(i,0,n-1)
			for(int j=0;j<(1<<n);j+=(1<<(i+1)))
				fr(k,0,(1<<i)-1)
					a[j+k+(1<<i)]=(a[j+k+(1<<i)]+opt*a[j+k]+mod)%mod;
	}
	void fwtand(long long *a,long long n,long long opt)
	{
		fr(i,0,n-1)
			for(int j=0;j<(1<<n);j+=(1<<(i+1)))
				fr(k,0,(1<<i)-1)
					a[j+k]=(a[j+k]+opt*a[j+k+(1<<i)]+mod)%mod;
	}
	void fwtxor(long long *a,long long n,long long opt)
	{
		opt=(opt==1?1:i2);
		fr(i,0,n-1)
			for(int j=0;j<(1<<n);j+=(1<<(i+1)))
				fr(k,0,(1<<i)-1)
				{
					long long x=a[j+k],y=a[j+k+(1<<i)];
					a[j+k]=(x+y)*opt%mod;
					a[j+k+(1<<i)]=(x-y+mod)*opt%mod;
				}
	}
	const int or_tag=1,and_tag=2,xor_tag=3;
	long long _a[N],_b[N];
	void fwt(long long *c,long long *a,long long *b,long long n,long long opt)
	{
		fr(i,0,(1<<n)-1)
		{
			_a[i]=a[i];
			_b[i]=b[i];
		}
		if(opt==or_tag)
		{
			fwtor(a,n,1);
			fwtor(b,n,1);
			fr(i,0,(1<<n)-1)
				c[i]=a[i]*b[i]%mod;
			fwtor(c,n,-1);
		}
		else if(opt==and_tag)
		{

			fwtand(a,n,1);
			fwtand(b,n,1);
			fr(i,0,(1<<n)-1)
				c[i]=a[i]*b[i]%mod;
			fwtand(c,n,-1);
		}
		else if(opt==xor_tag)
		{
			fwtxor(a,n,1);
			fwtxor(b,n,1);
			fr(i,0,(1<<n)-1)
				c[i]=a[i]*b[i]%mod;
			fwtxor(c,n,-1);
		}
		fr(i,0,(1<<n)-1)
		{
			a[i]=_a[i];
			b[i]=_b[i];
		}
	}
}
```

